# !/usr/bin/env bash

set -eou pipefail
IFS=$'\n\t '

usage() {
  cat <<EOF
exec onto the first pod in the list that is returned
USAGE:
  kcexec <arguments> <commands>

OPTIONAL ARGUMENTS
      -n namespace      the namespace to use, default to default
      -p pod name      the name of the pod
      -h                show usage
EOF
}

get_contexts() {
  $KUBECTL config get-contexts -o=name | sort -n
}

main() {
  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe 2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    echo >&2 "kubectl is not installed"
    exit 1
  fi

  local cmd namespace pod_name context

  while getopts ":n:p:c:h" opt; do
    case $opt in
    h) usage && exit 1 ;;
    c) context="$OPTARG" ;;
    n) namespace="$OPTARG" ;;
    p) pod_name="$OPTARG" ;;
    esac
  done
  shift $((OPTIND - 1))
  remaining_args="$@"

  if [[ -z "${context}" ]]; then
    set -u pipefail
    local ctx_list ctx_index ctx_array=() count=0

    ctx_list=$(get_contexts) || exit_err "error getting context list"

    for i in $ctx_list; do
      if [[ "${i}" != "dummy" ]] && [[ "${i}" != "docker-for-desktop" ]]; then
        echo "$count) ${i}"
        count=$(expr $count + 1)
        ctx_array+=("$i")
      fi
    done

    read -p'choose context> ' ctx_index
    context="${ctx_array[$ctx_index]}"
  fi

  cmd="$KUBECTL --context $context -n $namespace get pods -l app.kubernetes.io/name=$pod_name --no-headers"
  first_pod="$($cmd | awk '{print $1}' | sed -n 1p)"

  $KUBECTL --context $context -n $namespace exec -it $first_pod -- $remaining_args
}

main "$@"
